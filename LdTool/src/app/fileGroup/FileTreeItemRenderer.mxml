<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  fontFamily="宋体" height="20"
					  doubleClickEnabled="true"
					  doubleClick="doubleClickHandler(event)"
					  dataChange="dataChangeHandler(event)"
					  rightMouseDown="rightMouseDownHandler(event)"
					  >
	<fx:Script>
		<![CDATA[
			import app.common.AppCommon;
			
			import mx.controls.Tree;
			import mx.events.FlexEvent;
			
			
			protected function dataChangeHandler(event:FlexEvent):void
			{
				if(data == null) return;
				
				var isLD:Boolean = treeListData.hasChildren;
				nameLb.setStyle("color", isLD ? "#999999" : "#333333");
				nameLb.setStyle("fontSize", isLD ? 14 : 12);
				
				var name:String = data.name;
				var ld:String = "";
				if(isLD) {
					var arr:Array = name.split("\\");
					name = "";
					for(var i:int=0; i < arr.length-1; i++) {
						name += arr[i] + "\\";
					}
					ld = arr[arr.length - 1];
				}
				nameLb.text = name;
				ldLb.text = ld;
			}
			
			
			protected function doubleClickHandler(event:MouseEvent):void
			{
				var tree:Tree = this.owner as Tree;
				if(treeListData.hasChildren) {
					tree.expandItem(data, !tree.isItemOpen(data));
				}
				else {
					AppCommon.app.exportGroup.addItem(data);
				}
			}
			
			
			protected function rightMouseDownHandler(event:MouseEvent):void
			{
				var tree:Tree = this.owner as Tree;
				tree.selectedItem = this.data;
				
				if(treeListData.hasChildren) {
					tree.expandItem(data, !tree.isItemOpen(data));
				}
				else {
					AppCommon.app.previewPanel.show(data);
				}
				event.stopImmediatePropagation();
			}
			
			
			
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				this.toolTip = (nameLb.x + nameLb.width + 20 > owner.width) ? data.name : "";
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:HGroup left="0" right="0" top="0" bottom="0" verticalAlign="middle">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
		</s:Group>
		<!--<s:BitmapImage source="{treeListData.icon}" />-->
		<s:HGroup left="0" right="0" top="0" bottom="0" gap="2">
			<s:Label id="nameLb" />
			<s:Label id="ldLb" fontWeight="bold" color="#333333" fontSize="14" />
		</s:HGroup>
	</s:HGroup>
</s:MXTreeItemRenderer>
